{"remainingRequest":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\src\\components\\SnakeGame.vue?vue&type=style&index=0&id=33a5af5c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\src\\components\\SnakeGame.vue","mtime":1621892018439},{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\adeli\\Desktop\\Faculta\\Semestrul2\\TD\\Proiect\\Snake\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc25ha2UgewogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwogIHRleHQtYWxpZ246IGNlbnRlcjsKfQoKLmJvYXJkIHsKICBtYXJnaW4tdG9wOiAxMDBweDsKfQo="},{"version":3,"sources":["SnakeGame.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"SnakeGame.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"snake\">\n    <h1>Snake Game</h1>\n    <h2>Score: {{ score }}</h2>\n    <canvas\n      ref=\"game\"\n      class=\"board\"\n      width=\"640\"\n      height=\"480\"\n      style=\"border: 1px solid black\"\n    >\n    </canvas>\n  </div>\n</template>\n\n<script>\nimport io from \"socket.io-client\";\nexport default {\n  name: \"SnakeGame\",\n  snakePosition: [],\n  foodPosition: {},\n  pastSnakePosition: [],\n  pastFoodPosition: {},\n  direction: \"r\",\n  data() {\n    return {\n      socket: {},\n      context: {},\n      score: 0,\n    };\n  },\n\n  created() {\n    this.socket = io(\"http://localhost:3000\");\n  },\n\n  mounted() {\n    this.context = this.$refs.game.getContext(\"2d\");\n    this.socket.on(\"snakePosition\", (data) => {\n      this.snakePosition = data;\n      this.paintSnake();\n    });\n\n    this.socket.on(\"foodPosition\", (data) => {\n      this.foodPosition = data;\n      this.paintFood(this.foodPosition);\n      this.pastFoodPosition = data;\n    });\n\n    this.socket.on(\"lose\", () => {\n      alert(\"You lose! Your final score is: \" + this.score);\n      window.location = location;\n    });\n\n    this.socket.on(\"updateScore\", () => {\n      this.score += 10;\n    });\n\n    window.addEventListener(\"keydown\", (e) => {\n      \n      switch (e.key) {\n        case \"ArrowUp\":\n          console.log(e.key);\n          if (this.direction != \"d\") {\n            this.goUp();\n            this.direction = \"u\";\n          }\n          console.log(this.pastSnakePosition[0].x, this.pastSnakePosition[0].y);\n          break;\n\n        case \"ArrowDown\":\n          console.log(e.key);\n          if (this.direction != \"u\") {\n            this.goDowm();\n            this.direction = \"d\";\n          }\n          console.log(this.pastSnakePosition[0].x, this.pastSnakePosition[0].y);\n          break;\n\n        case \"ArrowLeft\":\n          console.log(e.key);\n          if (this.direction != \"r\") {\n            this.goLeft();\n            this.direction = \"l\";\n          }\n          console.log(this.pastSnakePosition[0].x, this.pastSnakePosition[0].y);\n          break;\n\n        case \"ArrowRight\":\n          console.log(e.key);\n          if (this.direction != \"l\") {\n            this.goRight();\n            this.direction = \"r\";\n          }\n          console.log(this.pastSnakePosition[0].x, this.pastSnakePosition[0].y);\n          break;\n      }\n    });\n  },\n\n  methods: {\n    paintSnake() {\n      if (this.pastSnakePosition != null) {\n        for (var i = 0; i < this.pastSnakePosition.length; i++) {\n          this.context.clearRect(\n            this.pastSnakePosition[i].x,\n            this.pastSnakePosition[i].y,\n            20,\n            20\n          );\n          if (i < this.snakePosition.length - 1) {\n            this.snakePosition[i + 1] = this.pastSnakePosition[i];\n          }\n        }\n      }\n\n      this.context.fillStyle = \"black;\";\n      for (var j = 0; j < this.snakePosition.length; j++) {\n        this.context.fillRect(\n          this.snakePosition[j].x,\n          this.snakePosition[j].y,\n          20,\n          20\n        );\n      }\n      this.verify();\n      this.pastSnakePosition = this.snakePosition;\n    },\n\n    paintFood(position) {\n      if (this.pastFoodPosition != null) {\n        this.context.clearRect(\n          this.pastFoodPosition.x,\n          this.pastFoodPosition.y,\n          20,\n          20\n        );\n      }\n      this.context.fillStyle = \"red\";\n      this.context.fillRect(position.x, position.y, 20, 20);\n      this.context.fillStyle = \"black\";\n    },\n\n    goRight() {\n      this.context.fillStyle = \"black\";\n      this.socket.emit(\"goRight\");\n    },\n\n    goLeft() {\n      this.context.fillStyle = \"black\";\n      this.socket.emit(\"goLeft\");\n    },\n\n    goUp() {\n      this.context.fillStyle = \"black\";\n      this.socket.emit(\"goUp\");\n    },\n\n    goDowm() {\n      this.context.fillStyle = \"black\";\n      this.socket.emit(\"goDown\");\n    },\n\n    verify(){\n      for (var i2 = 1; i2 < this.snakePosition.length; i2++) {\n        if ( (this.snakePosition[0].x == this.snakePosition[i2].x) && (this.snakePosition[0].y == this.snakePosition[i2].y)) {\n          alert(\"You lose! Your final score is: \" + this.score);\n          window.location = location;\n        }\n      }\n    }\n  },\n};\n</script>\n\n<style scoped>\n.snake {\n  margin: 0;\n  padding: 0;\n  text-align: center;\n}\n\n.board {\n  margin-top: 100px;\n}\n</style>\n"]}]}